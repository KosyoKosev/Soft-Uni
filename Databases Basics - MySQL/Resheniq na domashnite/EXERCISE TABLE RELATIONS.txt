#1

CREATE TABLE persons (
	person_id INT NOT NULL,
    first_name VARCHAR (30) NOT NULL,
    salary DECIMAL (19, 2),
    passport_id INT NOT NULL UNIQUE
);

CREATE TABLE passports (
	passport_id INT NOT NULL PRIMARY KEY,
    passport_number CHAR (8) NOT NULL
);

INSERT INTO passports (passport_id, passport_number)
VALUES (101, 'N34FG21B'),
       (102, 'K65LO4R7'),
       (103, 'ZE657QP2');

INSERT INTO persons (person_id, first_name, salary, passport_id)
VALUES(1, 'Roberto', 43300.00, 102),
(2, 'Tom', 56100.00, 103),
(3, 'Yana',	60200.00, 101);

ALTER TABLE persons
ADD CONSTRAINT pk_peson_id PRIMARY KEY persons(person_id),
ADD CONSTRAINT fk_persons_passports FOREIGN KEY (passport_id)
REFERENCES passports(passport_id);

#2

CREATE TABLE manufacturers (
	manufacturer_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR (30) NOT NULL,
    established_on DATE
);

CREATE TABLE models (
	model_id INT NOT NULL PRIMARY KEY,
    name VARCHAR (30) NOT NULL,
    manufacturer_id INT NOT NULL,
    CONSTRAINT fk_models_manufacturers FOREIGN KEY (manufacturer_id)
    REFERENCES manufacturers(manufacturer_id)
);

INSERT INTO manufacturers (name, established_on)
VALUES ('BMW', '1916/03/01'),
('Tesla', '2003/01/01'),
('Lada', '1966/05/01');

INSERT INTO models (model_id, name, manufacturer_id)
VALUES (101, 'X1', 1),
(102, 'i6', 1),
(103, 'Model S', 2),
(104, 'Model X', 2),
(105, 'Model 3', 2),
(106, 'Nova', 3);

#3

CREATE TABLE students (
	student_id int AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR (50) NOT NULL
);

CREATE TABLE exams (
	exam_id INT  PRIMARY KEY,
    name VARCHAR (50)
);

CREATE TABLE students_exams (
	student_id INT NOT NULL,
    exam_id INT NOT NULL,
    CONSTRAINT pk_students_exams PRIMARY KEY (student_id, exam_id),
    CONSTRAINT fk_students_exams_students FOREIGN KEY (student_id)
    REFERENCES students(student_id),
    CONSTRAINT fk_students_exams_exams FOREIGN KEY (exam_id)
    REFERENCES exams(exam_id)
);


INSERT INTO students (name)
VALUES ('Mila'), ('Toni'), ('Ron');

INSERT INTO exams (exam_id, name)
VALUES (101, 'Spring MVC'), (102, 'Neo4j'), (103, 'Oracle 11g');

INSERT INTO students_exams (student_id, exam_id)
VALUES (1, 101), (1, 102), (2, 101), (3, 103), (2, 102), (2, 103);

#4

CREATE TABLE teachers (
	teacher_id INT NOT NULL PRIMARY KEY,
    name VARCHAR (50),
    manager_id INT,
    CONSTRAINT fk_teachers_teachers FOREIGN KEY (manager_id)
    REFERENCES teachers(teacher_id)
);

INSERT INTO teachers (teacher_id, name)
VALUES (101, 'John'), (102, 'Maya'), (103, 'Silvia'), (104, 'Ted'), (105, 'Mark'), (106, 'Greta');

UPDATE teachers SET manager_id = 106 WHERE teacher_id = 102;
UPDATE teachers SET manager_id = 106 WHERE teacher_id = 103;
UPDATE teachers SET manager_id = 105 WHERE teacher_id = 104;
UPDATE teachers SET manager_id = 101 WHERE teacher_id = 105;
UPDATE teachers SET manager_id = 101 WHERE teacher_id = 106;

#5

CREATE DATABASE online_store;
use online_store;

CREATE TABLE item_types(
	item_type_id INT(11) PRIMARY KEY,
    name VARCHAR(50)
);

CREATE TABLE cities (
	city_id INT(11) PRIMARY KEY,
    name VARCHAR(50) NOT NULL
); 

CREATE TABLE items (
	item_id INT(11) PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    item_type_id INT(11) NOT NULL,
    CONSTRAINT fk_items_item_types FOREIGN KEY (item_type_id)
    REFERENCES item_types(item_type_id)
);

CREATE TABLE customers (
	customer_id INT(11) PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    birthday DATE NOT NULL,
    city_id INT(11) NOT NULL,
    CONSTRAINT fk_customers_cities FOREIGN KEY (city_id)
    REFERENCES cities(city_id)
);

CREATE TABLE orders (
	order_id INT(11) PRIMARY KEY,
    customer_id INT(11) NOT NULL,
    CONSTRAINT fk_orders_customers FOREIGN KEY (customer_id)
    REFERENCES customers(customer_id)
);

CREATE TABLE order_items (
	order_id INT(11),
    item_id INT(11),
    CONSTRAINT pk_order_items PRIMARY KEY (order_id, item_id),
    CONSTRAINT fk_order_items_orders FOREIGN KEY (order_id)
    REFERENCES orders(order_id),
    CONSTRAINT fk_order_items_items FOREIGN KEY (item_id)
    REFERENCES items(item_id)
);

#6

CREATE DATABASE university;
USE university;

CREATE TABLE majors (
	major_id INT(11) PRIMARY KEY,
    name VARCHAR(50) NOT NULL
);

CREATE TABLE subjects (
	subject_id INT(11) PRIMARY KEY,
    subject_name VARCHAR(50) NOT NULL
);

CREATE TABLE students (
	student_id INT(11) PRIMARY KEY,
    student_number VARCHAR(12) NOT NULL,
    student_name VARCHAR(50),
    major_id INT(11),
    CONSTRAINT fk_students_majors FOREIGN KEY (major_id)
    REFERENCES majors(major_id)
);

CREATE TABLE payments (
	payment_id INT(11) PRIMARY KEY,
    payment_date DATE NOT NULL,
    payment_amount DECIMAL(8,2) NOT NULL,
    student_id INT(11) NOT NULL,
    CONSTRAINT fk_payments_students FOREIGN KEY (student_id)
    REFERENCES students(student_id)
);

CREATE TABLE agenda (
	student_id INT(11),
    subject_id INT(11),
    CONSTRAINT pk_agenda PRIMARY KEY (student_id, subject_id),
    CONSTRAINT fk_agenda_students FOREIGN KEY (student_id)
    REFERENCES students(student_id),
    CONSTRAINT fk_agenda_subjects FOREIGN KEY (subject_id)
    REFERENCES subjects(subject_id)
);

#9

SELECT m.mountain_range, p.peak_name, p.elevation AS 'peak_elevation' FROM mountains AS m
JOIN peaks AS p ON p.mountain_id = m.id
WHERE m.mountain_range = 'Rila'
ORDER BY p.elevation DESC;